#! /usr/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

bin_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
at_home=$( cd "$( dirname "$bin_dir" )" && pwd )
source "${bin_dir}/build"

function print_usage() {
  cat <<EOF

Usage: agitator <command>

Possible commands:
  start     Starts agitator
  stop      Stop agitator
EOF
}

function run_agitators() {
  unset APP_HOSTS
  export APP_HOSTS=$MANAGER_HOSTS
  echo "Starting manager agitation as ${1} for ${APP_HOSTS}"
  start_app_agitator "manager" $AGTR_MASTER_KILL_SLEEP_TIME $AGTR_MASTER_RESTART_SLEEP_TIME 1 1 > "${manager_log}" 2>&1 &
  unset APP_HOSTS
  export APP_HOSTS=$TSERVER_HOSTS
  echo "Starting tserver agitation as ${1} for ${APP_HOSTS}"
  start_app_agitator "tserver" $AGTR_TSERVER_KILL_SLEEP_TIME $AGTR_TSERVER_RESTART_SLEEP_TIME $AGTR_TSERVER_MIN_KILL $AGTR_TSERVER_MAX_KILL > "${tserver_log}" 2>&1 &
}

# Starts a app specific agitator
# usage: start_app_agitator app_name kill_sleep_time restart_sleep_time min_kill max_kill
# Requires that a list of hosts to be set in $APP_HOSTS
function start_app_agitator() {
  app_name=$1
  kill_sleep_time=$2
  restart_sleep_time=$3
  min_kill=$4
  max_kill=$5
  ENV_VARS="ACCUMULO_HOME=${ACCUMULO_HOME} ZOOKEEPER_HOME=${ZOOKEEPER_HOME} HADOOP_HOME=${HADOOP_HOME} JAVA_HOME=${JAVA_HOME}"
  if [[ -z $APP_HOSTS ]]; then
    echo "ERROR: No hosts were found in env for ${app_name}"
    exit 1
  fi
  T="$(date +'%Y%m%d %H:%M:%S')"
  echo "${T} Running ${app_name} agitator ${kill_sleep_time} ${restart_sleep_time} ${min_kill} ${max_kill} for HOSTS=${APP_HOSTS}"
  while true; do
    echo "${T} Sleeping for ${kill_sleep_time} minutes"
    sleep $((kill_sleep_time * 60))

    T="$(date +'%Y%m%d %H:%M:%S')"
    numToWack=$((min_kill + RANDOM % max_kill))
    nodeToWack=$(echo "${APP_HOSTS}" | cut -d" " -f1)
    hostsArray=($APP_HOSTS)
    numOfHosts=${#hostsArray[@]}
    declare -a nodesToWack

    if ((max_kill == 1)) ; then
      echo "${T} Killing ${app_name}"
      ssh "${nodeToWack}" "pkill -f '[ ]org.apache.accumulo.start.*${app_name}'"
    else
      # get the random nodes to kill
      count=0
      while [ $count -lt $numToWack ]; do
        randomHostIndex=$((1 + RANDOM % numOfHosts))
        nodeToWack=${hostsArray[randomHostIndex]}
        # only add host to the array if its not already there
        if [[ ! " ${nodesToWack[*]} " =~ " ${nodeToWack} " ]]; then
          nodesToWack[count]=${nodeToWack}
        fi
        count=${#nodesToWack[@]}
      done
      echo "${T} Killing ${count} ${app_name} nodes"
      for i in ${nodesToWack[@]}; do
        ssh "${i}" "pkill -f '[ ]org.apache.accumulo.start.*${app_name}'"
      done
    fi

    T="$(date +'%Y%m%d %H:%M:%S')"
    echo "${T} Sleeping for ${restart_sleep_time} minutes."
    sleep $((restart_sleep_time * 60))

    T="$(date +'%Y%m%d %H:%M:%S')"
    if ((max_kill == 1)) ; then
      echo "${T} Restarting ${app_name} at ${nodeToWack}"
      ssh "${nodeToWack}" "bash -c '${ENV_VARS} ${ACCUMULO_HOME}/bin/accumulo-service ${app_name} start'"
    else
      for i in ${nodesToWack[@]}; do
        echo "${T} Restarting ${app_name} node at ${i}"
        ssh "${i}" "bash -c '${ENV_VARS} ${ACCUMULO_HOME}/bin/accumulo-service ${app_name} start'"
      done
    fi
  done
}

function start_datanode_agitator() {
  kill_sleep_time=$1
  restart_sleep_time=$2
  min_kill=$3
  max_kill=$4

  ## check hosts was set in env variable
  if [[ -z $APP_HOSTS ]]; then
    echo "ERROR: No hosts were found in env for ${app_name}"
    exit 1
  fi
  T="$(date +'%Y%m%d %H:%M:%S')"
  echo "${T} Running datanode agitator ${kill_sleep_time} ${restart_sleep_time} ${min_kill} ${max_kill} for HOSTS=${APP_HOSTS}"
  while true; do
      echo "${T} Sleeping for ${kill_sleep_time} minutes"
      sleep $((kill_sleep_time * 60))

      T="$(date +'%Y%m%d %H:%M:%S')"
      numToWack=$((min_kill + RANDOM % max_kill))
      nodeToWack=$(echo "${APP_HOSTS}" | cut -d" " -f1)
      hostsArray=($APP_HOSTS)
      numOfHosts=${#hostsArray[@]}
      declare -a nodesToWack

      if ((max_kill == 1)) ; then
        echo "${T} Killing datanode ${nodeToWack}"
        ssh "${nodeToWack}" "pkill -9 -f '[p]roc_datanode'"
      else
        # get the random nodes to kill
        count=0
        while [ $count -lt $numToWack ]; do
          randomHostIndex=$((1 + RANDOM % numOfHosts))
          nodeToWack=${hostsArray[randomHostIndex]}
          # only add host to the array if its not already there
          if [[ ! " ${nodesToWack[*]} " =~ " ${nodeToWack} " ]]; then
            nodesToWack[count]=${nodeToWack}
          fi
          count=${#nodesToWack[@]}
        done
        echo "${T} Killing ${count} datanodes"
        for i in ${nodesToWack[@]}; do
          ssh "${i}" "pkill -9 -f '[p]roc_datanode'"
        done
      fi

      T="$(date +'%Y%m%d %H:%M:%S')"
      echo "${T} Sleeping for ${restart_sleep_time} minutes."
      sleep $((restart_sleep_time * 60))

      T="$(date +'%Y%m%d %H:%M:%S')"
      if ((max_kill == 1)) ; then
        echo "${T} Restarting datanode at ${nodeToWack}"
        ssh ${nodeToWack} "bash -c '${ENV_VARS} ${HADOOP_HOME}/bin/hdfs --daemon start datanode'"
      else
        for i in ${nodesToWack[@]}; do
          echo "${T} Restarting datanode at ${i}"
          ssh ${i} "bash -c '${ENV_VARS} ${HADOOP_HOME}/bin/hdfs --daemon start datanode'"
        done
      fi
    done
}

function start_agitator() {
  ## check that pssh is installed, falling back to parallel-ssh if needed
  ## make sure to export it, so it can be seen inside the agitator perl script
  if hash pssh 2>/dev/null; then
    export PSSH=pssh
  elif hash parallel-ssh 2>/dev/null; then
    export PSSH=parallel-ssh
  else
    echo >&2 "The agitator requires pssh/parallel-ssh to be installed. Aborting."; exit 1;
  fi
  ## read configuration into env variables
  read_cluster_conf

  mkdir -p "${at_home}/logs"
  log_base="${at_home}/logs/$(date +%Y%m%d%H%M%S)_$(hostname)"
  conf_dir="${at_home}/conf"
  manager_log="${log_base}_manager-agitator.log"
  tserver_log="${log_base}_tserver-agitator.log"
  datanode_log="${log_base}_datanode-agitator.log"

  [[ -n $AGITATOR_USER ]] || AGITATOR_USER=$(whoami)

  if [[ $AGITATOR_USER == "$AGTR_ACCUMULO_USER" ]]; then
    run_agitators ${AGITATOR_USER}
  else
    sudo -i -u "${AGTR_ACCUMULO_USER}"
    run_agitators ${AGTR_ACCUMULO_USER}
  fi

  if [[ $AGITATOR_USER == "$AGTR_HDFS_USER" ]]; then
    echo "Running datanode-agitator as $AGITATOR_USER"
    start_datanode_agitator $AGTR_DATANODE_KILL_SLEEP_TIME $AGTR_DATANODE_RESTART_SLEEP_TIME $AGTR_DATANODE_MIN_KILL $AGTR_DATANODE_MAX_KILL > "${datanode_log}" 2>&1 &
  else
    echo "Running datanode-agitator as $AGTR_HDFS_USER using sudo."
    sudo -i -u "$AGTR_HDFS_USER"
    start_datanode_agitator $AGTR_DATANODE_KILL_SLEEP_TIME $AGTR_DATANODE_RESTART_SLEEP_TIME $AGTR_DATANODE_MIN_KILL $AGTR_DATANODE_MAX_KILL > "${datanode_log}" 2>&1 &
  fi

  if ${AGTR_HDFS:-false} ; then
    agitator_log=${log_base}_hdfs-agitator
    sudo -u "$AGTR_HDFS_SUPERUSER" nohup "${at_home}/libexec/hdfs-agitator.pl" --sleep "${AGTR_HDFS_SLEEP_TIME}" --hdfs-cmd "${AGTR_HDFS_COMMAND}" --superuser "${AGTR_HDFS_SUPERUSER}" >"${agitator_log}.out" 2>"${agitator_log}.err" &
  fi
}

function stop_agitator() {
  [[ -n $AGITATOR_USER ]] || AGITATOR_USER=$(whoami)
  echo "Stopping all processes matching 'sleep' as $AGITATOR_USER"
  pkill -f sleep 2>/dev/null
  echo "Stopping all processes matching 'agitator' as $AGITATOR_USER"
  pkill -f agitator 2>/dev/null
}

function parse_fail() {
  echo "Failed to parse ${conf}/cluster.yaml"
  exit 1
}

# Read the configuration from cluster.yaml - expects at least the manager and tservers
function read_cluster_conf() {
  conf="${ACCUMULO_HOME}/conf"
  echo "Reading cluster config from ${conf}/cluster.yaml"
  trap 'rm -f "$CONFIG_FILE"' EXIT
  CONFIG_FILE=$(mktemp) || exit 1
  accumulo org.apache.accumulo.core.conf.cluster.ClusterConfigParser "${conf}"/cluster.yaml > "$CONFIG_FILE" || parse_fail
  . "$CONFIG_FILE"
  rm -f "$CONFIG_FILE"

  if [[ -z $MANAGER_HOSTS ]]; then
    echo "ERROR: managers not found in ${conf}/cluster.yaml"
    exit 1
  fi
  if [[ -z $TSERVER_HOSTS ]]; then
    echo "ERROR: tservers not found in ${conf}/cluster.yaml"
    exit 1
  fi
}

case "$1" in
  start)
    start_agitator
    ;;
  stop)
    stop_agitator
    ;;
  *)
    echo "ERROR: unknown command - $2"
    print_usage
    exit 1
esac
